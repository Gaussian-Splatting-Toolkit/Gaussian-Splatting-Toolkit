[tool.poetry]
name = "gstoolkit"
authors = [
    "Hu Tianrun <tianrunhu@gmail.com>",
]
version = "0.1.0"
description = "Gaussian Splatting Toolkit for robotics perception"
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
]
packages = [
    {include = "gs_toolkit"}
]

# Dependencies
[tool.poetry.dependencies]
python = "3.10"
comet_ml = "3.35.5"
jaxtyping = "0.2.25"
mediapy = "1.2.0"
opencv-python = "4.9.0.80"
open3d = "0.18.0"
pathos = "0.3.1"
pymeshlab = "v2023.12"
pytorch_msssim = "1.0.0"
torchmetrics = "1.2.1"
plyfile = "1.0.3"
rawpy = "0.19.0"
rich = "13.7.0"
splines = "0.3.1"
tyro = "0.6.6"
xatlas = "0.0.8"
awscli = "1.32.74"
black = "23.12.1"
pre-commit = "3.6.0"
pytest = "7.4.4"
pytest-xdist = "3.5.0"
pycolmap = "0.6.1"
projectaria_tools = "1.3.1"
tensorboard = "2.15.1"
typeguard = "2.13.3"
ruff = "0.1.14"
ssh-config = "0.1.5"
viser = "0.1.21"
wandb = "0.16.2"
sphinx = "5.3.0"
bpy = "4.0.0"
pybind11 = "2.11.1"
OpenEXR = "3.2.4"
segment-anything = {git = "https://github.com/Gaussian-Splatting-Toolkit/segment-anything.git"}
GroundingDINO = {git = "https://github.com/Gaussian-Splatting-Toolkit/GroundingDINO.git"}
rasterizer = {path = "gs_toolkit/gs_components"}
deva = {git = "https://github.com/Gaussian-Splatting-Toolkit/Tracking-Anything-with-DEVA.git"}
blendersynth = {git = "https://github.com/Gaussian-Splatting-Toolkit/BlenderSynth.git"}
hloc = {path = "third_party/Hierarchical-Localization"}

[tool.poetry.scripts]
gs-process-data = "gs_toolkit.scripts.process_data:entrypoint"
gs-train = "gs_toolkit.scripts.train:entrypoint"
gs-eval = "gs_toolkit.scripts.eval:entrypoint"
gs-viewer = "gs_toolkit.scripts.viewer.run_viewer:entrypoint"
gs-render = "gs_toolkit.scripts.render:entrypoint"
gs-export = "gs_toolkit.scripts.exporter:entrypoint"
gs-download-data = "gs_toolkit.scripts.downloads.download_data:entrypoint"

[tool.ruff]
line-length = 120
select = [
    "E",  # pycodestyle errors.
    "F",  # Pyflakes rules.
    "PLC",  # Pylint convention warnings.
    "PLE",  # Pylint errors.
    "PLR",  # Pylint refactor recommendations.
    "PLW",  # Pylint warnings.
]
ignore = [
    "E501",  # Line too long.
    "F722",  # Forward annotation false positive from jaxtyping. Should be caught by pyright.
    "F821",  # Forward annotation false positive from jaxtyping. Should be caught by pyright.
    "PLR2004",  # Magic value used in comparison.
    "PLR0915",  # Too many statements.
    "PLR0913",  # Too many arguments.
    "PLC0414",  # Import alias does not rename variable. (this is used for exporting names)
    "PLC1901",  # Use falsey strings.
    "PLR5501",  # Use `elif` instead of `else if`.
    "PLR0911",  # Too many return statements.
    "PLR0912",  # Too many branches.
    "PLW0603",  # Globa statement updates are discouraged.
    "PLW2901",  # For loop variable overwritten.
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
